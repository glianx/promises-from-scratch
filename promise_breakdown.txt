interface PromiseConstructor {

    /**
     * Creates a new Promise.
     * @param executor A callback used to initialize the promise. This callback is passed two arguments (also callbacks!):

     * a resolve callback used to resolve the promise with a value or the result of another promise,
     * a reject callback used to reject the promise with a provided reason or error.
     */

    new <T>(
        executor: (
            resolve: (value: T | PromiseLike<T>) => void, 
            reject: (reason?: any) => void
        ) => void)
    : Promise<T>;

...
}

interface Promise<T> {
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}